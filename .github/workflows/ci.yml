name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Disable telemetry for PowerShell
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        pwsh-version: ['7.4']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup PowerShell
      uses: microsoft/powershell@v1
      with:
        pwsh-version: ${{ matrix.pwsh-version }}

    - name: Install Required Modules
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -Scope CurrentUser
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        $results = Invoke-ScriptAnalyzer -Path ./src -Recurse -ReportSummary
        if ($results.Count -gt 0) {
          $results | Format-Table -AutoSize
          Write-Error "PSScriptAnalyzer found $($results.Count) issues"
        } else {
          Write-Host "PSScriptAnalyzer found no issues" -ForegroundColor Green
        }

    - name: Import Module
      shell: pwsh
      run: |
        Import-Module ./src/PwSh-Module.psd1 -Force
        Get-Module PwSh-Module

    - name: Run Pester Tests
      shell: pwsh
      run: |
        $config = New-PesterConfiguration
        $config.Run.Path = './tests'
        $config.Output.Verbosity = 'Detailed'
        $config.CodeCoverage.Enabled = $true
        $config.CodeCoverage.Path = './src/**/*.ps1'
        $config.CodeCoverage.OutputFormat = 'JaCoCo'
        $config.CodeCoverage.OutputPath = './coverage.xml'
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputFormat = 'NUnitXml'
        $config.TestResult.OutputPath = './testresults.xml'
        
        $result = Invoke-Pester -Configuration $config
        
        if ($result.Failed.Count -gt 0) {
          Write-Error "Pester tests failed"
          exit 1
        }

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.pwsh-version }}
        path: |
          testresults.xml
          coverage.xml

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  validate-examples:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup PowerShell
      uses: microsoft/powershell@v1

    - name: Install Module and Run Examples
      shell: pwsh
      run: |
        Import-Module ./src/PwSh-Module.psd1 -Force
        
        # Test that examples run without errors
        $exampleScript = './examples/BasicUsage.ps1'
        if (Test-Path $exampleScript) {
          Write-Host "Running example script: $exampleScript"
          & $exampleScript
        } else {
          Write-Warning "Example script not found: $exampleScript"
        }

  validate-module:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup PowerShell
      uses: microsoft/powershell@v1

    - name: Validate Module Manifest
      shell: pwsh
      run: |
        $manifest = Test-ModuleManifest -Path ./src/PwSh-Module.psd1
        Write-Host "Module manifest is valid"
        Write-Host "Module: $($manifest.Name)"
        Write-Host "Version: $($manifest.Version)"
        Write-Host "Author: $($manifest.Author)"
        Write-Host "Exported Functions: $($manifest.ExportedFunctions.Keys -join ', ')"

    - name: Test Module Import/Remove
      shell: pwsh
      run: |
        # Test import
        Import-Module ./src/PwSh-Module.psd1 -Force
        $module = Get-Module PwSh-Module
        if (-not $module) {
          Write-Error "Module failed to import"
          exit 1
        }
        
        # Test functions are available
        $functions = Get-Command -Module PwSh-Module
        Write-Host "Available functions: $($functions.Name -join ', ')"
        
        # Test basic functionality
        $data = Get-ExampleData -Limit 1
        if (-not $data) {
          Write-Error "Get-ExampleData failed"
          exit 1
        }
        
        # Test remove
        Remove-Module PwSh-Module
        $removedModule = Get-Module PwSh-Module
        if ($removedModule) {
          Write-Error "Module failed to remove"
          exit 1
        }
        
        Write-Host "Module validation successful" -ForegroundColor Green